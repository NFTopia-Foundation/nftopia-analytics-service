"""
Django settings for nftopia_analytics project.

Generated by 'django-admin startproject' using Django 5.2.3.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.2/ref/settings/
"""

from pathlib import Path

# from dotenv import load_dotenv
import os
from datetime import timedelta

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.getenv("DJANGO_SECRET_KEY", "django-insecure-your-secret-key-here")

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = []

# Redis Cache Configuration
CACHES = {
    'default': {
        'BACKEND': 'django_prometheus.cache.backends.redis.RedisCache',
        'LOCATION': 'redis://127.0.0.1:6379/1',
        'OPTIONS': {
            'CLIENT_CLASS': 'django_redis.client.DefaultClient',
            'CONNECTION_POOL_KWARGS': {
                'max_connections': 20,
                'retry_on_timeout': True,
            }
        },
        'KEY_PREFIX': 'nftopia_analytics',
        'TIMEOUT': 3600,  # 1 hour default
    },
    'visualization': {
        'BACKEND': 'django.core.cache.backends.locmem.LocMemCache',
        'LOCATION': 'unique-snowflake',
    }
}



# JWT Configuration
SIMPLE_JWT = {
    "ACCESS_TOKEN_LIFETIME": timedelta(minutes=15),
    "REFRESH_TOKEN_LIFETIME": timedelta(days=7),
    "ROTATE_REFRESH_TOKENS": True,
    "BLACKLIST_AFTER_ROTATION": True,
    "ALGORITHM": "HS256",
    "SIGNING_KEY": os.getenv("JWT_SECRET_KEY"),
    "VERIFYING_KEY": None,
    "AUTH_HEADER_TYPES": ("Bearer",),
    "USER_ID_FIELD": "id",
    "USER_ID_CLAIM": "user_id",
    "AUTH_TOKEN_CLASSES": ("rest_framework_simplejwt.tokens.AccessToken",),
    "TOKEN_TYPE_CLAIM": "token_type",
}

# DRF Configuration
REST_FRAMEWORK = {
    "DEFAULT_AUTHENTICATION_CLASSES": (
        "rest_framework_simplejwt.authentication.JWTAuthentication",
        "rest_framework.authentication.SessionAuthentication",
    ),
    "DEFAULT_PERMISSION_CLASSES": [
        "rest_framework.permissions.IsAuthenticated",
    ],
    "DEFAULT_SCHEMA_CLASS": ["drf_spectacular.openapi.AutoSchema"],
}


SPECTACULAR_SETTINGS = {
    'TITLE': 'NFTopia Analytics API',
    'DESCRIPTION': 'NFT transaction and analytics platform',
    'VERSION': '1.0.0',
    'SERVE_INCLUDE_SCHEMA': False,
    'SWAGGER_UI_DIST': 'SIDECAR',
    'SWAGGER_UI_FAVICON_HREF': 'SIDECAR',
    'REDOC_DIST': 'SIDECAR',
    'SCHEMA_PATH_PREFIX': r'/api/',
    'SCHEMA_PATH_PREFIX_TRIM': True,
    'COMPONENT_SPLIT_REQUEST': True,
    'AUTHENTICATION_WHITELIST': ['rest_framework_simplejwt.authentication.JWTAuthentication'],
    'SWAGGER_UI_SETTINGS': {
        'deepLinking': True,
        'persistAuthorization': True,
        'displayOperationId': True,
        'filter': True,
        'darkTheme': True,  # Enable dark mode
    },
}

ROOT_URLCONF = "nftopia_analytics.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [BASE_DIR / "templates"],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]

WSGI_APPLICATION = "nftopia_analytics.wsgi.application"


# Database
# https://docs.djangoproject.com/en/5.2/ref/settings/#databases



# Password validation
# https://docs.djangoproject.com/en/5.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.2/topics/i18n/

LANGUAGE_CODE = "en-us"

TIME_ZONE = "UTC"

USE_I18N = True

USE_TZ = True


# IPFS Configuration
IPFS_GATEWAY = "https://ipfs.io"  # Can be overridden in environment
IPFS_CACHE_TIMEOUT = 60 * 60 * 24  # 24 hours cache


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.2/howto/static-files/

STATIC_URL = "static/"
STATICFILES_DIRS = [
    BASE_DIR / "static",
]

# Default primary key field type
# https://docs.djangoproject.com/en/5.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"

# Analytics settings
ANALYTICS_TRACK_ANONYMOUS_USERS = True
ANALYTICS_GEO_IP_ENABLED = False  # Set to True to enable geographic tracking

# TimescaleDB Configuration
TIMESCALEDB_SETTINGS = {
    "CHUNK_TIME_INTERVAL": {
        "nft_mints": "1 day",
        "nft_sales": "1 day",
        "nft_transfers": "1 day",
        "gas_metrics": "1 day",
        "page_views": "1 day",
        "user_sessions": "7 days",
    },
    "RETENTION_POLICIES": {
        "raw_events": "90 days",
        "aggregates": "1 year",
    },
    "COMPRESSION": {
        "enabled": True,
        "compress_after": "7 days",
        "compression_level": 1,
    },
}

# Logging Configuration
LOGGING = {
    "version": 1,
    "disable_existing_loggers": False,
    "formatters": {
        "verbose": {
            "format": "{levelname} {asctime} {module} {message}",
            "style": "{",
        },
    },
    "handlers": {
        "auth_file": {
            "level": "INFO",
            "class": "logging.FileHandler",
            "filename": "auth.log",
            "formatter": "verbose",
        },
        "auth_errors": {
            "level": "WARNING",
            "class": "logging.FileHandler",
            "filename": "auth_errors.log",
            "formatter": "verbose",
        },
    },
    "loggers": {
        "authentication": {
            "handlers": ["auth_file", "auth_errors"],
            "level": "INFO",
            "propagate": True,
        },
    },
}

# Celery Configuration
CELERY_BROKER_URL = os.getenv('CELERY_BROKER_URL', 'redis://localhost:6379/0')
CELERY_RESULT_BACKEND = os.getenv('CELERY_RESULT_BACKEND', 'redis://localhost:6379/0')
CELERY_ACCEPT_CONTENT = ['json']
CELERY_TASK_SERIALIZER = 'json'
CELERY_RESULT_SERIALIZER = 'json'
CELERY_TIMEZONE = 'UTC'

WEBHOOK_SECRET = 'your-secret-key'  # In production, use environment variables

# Celery Beat Schedule for automated reports
from celery.schedules import crontab

CELERY_BEAT_SCHEDULE = {
    'generate-scheduled-reports': {
        'task': 'analytics.tasks.generate_scheduled_reports_task',
        'schedule': crontab(minute=0, hour='*/6'),
    },
    'cleanup-old-data': {
        'task': 'analytics.tasks.cleanup_old_data_task',
        'schedule': crontab(minute=0, hour=2),
    },
    'aggregate-daily-mints': {
        'task': 'analytics.tasks.aggregate_mints',
        'schedule': crontab(minute=5, hour=0),
    },
    'aggregate-daily-sales': {
        'task': 'analytics.tasks.aggregate_sales',
        'schedule': crontab(minute=15, hour=0),
    },
    'aggregate-daily-user-activity': {
        'task': 'analytics.tasks.aggregate_user_activity',
        'schedule': crontab(minute=30, hour=0),
    },
}

# Email Configuration
EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'
EMAIL_HOST = os.getenv('EMAIL_HOST', 'smtp.gmail.com')
EMAIL_PORT = int(os.getenv('EMAIL_PORT', '587'))
EMAIL_USE_TLS = os.getenv('EMAIL_USE_TLS', 'True').lower() == 'true'
EMAIL_HOST_USER = os.getenv('EMAIL_HOST_USER', '')
EMAIL_HOST_PASSWORD = os.getenv('EMAIL_HOST_PASSWORD', '')
DEFAULT_FROM_EMAIL = os.getenv('DEFAULT_FROM_EMAIL', 'noreply@nftopia.com')

# AWS S3 Configuration (optional)
AWS_ACCESS_KEY_ID = os.getenv('AWS_ACCESS_KEY_ID', '')
AWS_SECRET_ACCESS_KEY = os.getenv('AWS_SECRET_ACCESS_KEY', '')
AWS_S3_REGION_NAME = os.getenv('AWS_S3_REGION_NAME', 'us-east-1')

# Report Generation Settings
REPORT_SETTINGS = {
    'MAX_RECORDS_PDF': 50,
    'MAX_RECORDS_CSV': 10000,
    'TEMP_DIR': '/tmp',
    'DEFAULT_S3_BUCKET': os.getenv('REPORTS_S3_BUCKET', ''),
}

# Add required packages to INSTALLED_APPS
INSTALLED_APPS = [
    # Django core apps
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",

    # Third-party apps
    "rest_framework",
    "rest_framework_simplejwt",
    "rest_framework_simplejwt.token_blacklist",
    "django_celery_beat",
    "django_celery_results",
    "django_pandas",
    "django_prometheus",
    "drf_spectacular",
    "drf_spectacular_sidecar",
    "celery",

    # NFTopia apps
    "users",
    "sales",
    "minting",
    "marketplace",
    "analytics",
    "authentication",
    "webhooks"
]

MIDDLEWARE = [
    # Django core middleware
    "django.middleware.security.SecurityMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
    
    # Prometheus monitoring middleware
    'django_prometheus.middleware.PrometheusBeforeMiddleware',
    
    # Custom analytics middleware
    "analytics.middleware.AnalyticsMiddleware",
    
    # Prometheus (must come after all other middleware)
    'django_prometheus.middleware.PrometheusAfterMiddleware',
]

PROMETHEUS_EXPORT_MIGRATIONS = False

ROOT_URLCONF = "nftopia_analytics.urls"

WSGI_APPLICATION = "nftopia_analytics.wsgi.application"


# Database
# https://docs.djangoproject.com/en/5.2/ref/settings/#databases

# TimescaleDB PostgreSQL Configuration
DATABASES = {
    "default": {
        "ENGINE": "django_prometheus.db.backends.postgresql",  # Using Prometheus-enabled engine
        "NAME": os.getenv("TIMESCALE_DB_NAME", "nftopia_analytics"),
        "USER": os.getenv("TIMESCALE_DB_USER", "postgres"),
        "PASSWORD": os.getenv("TIMESCALE_DB_PASSWORD", "postgres"),
        "HOST": os.getenv("TIMESCALE_DB_HOST", "localhost"),
        "PORT": os.getenv("TIMESCALE_DB_PORT", "5432"),
        "OPTIONS": {"options": "-c default_transaction_isolation=serializable"},
        # Additional recommended production settings:
        "CONN_MAX_AGE": 300,  # 5 minute connection persistence
        "DISABLE_SERVER_SIDE_CURSORS": False,  # Important for TimescaleDB
    }
}

# Fallback to SQLite for development if PostgreSQL is not available
if os.getenv("USE_SQLITE", "false").lower() == "true":
    DATABASES = {
        "default": {
            "ENGINE": "django.db.backends.sqlite3",
            "NAME": BASE_DIR / "db.sqlite3",
        }
    }


# Password validation
# https://docs.djangoproject.com/en/5.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]



AUTH_USER_MODEL = 'users.User'


# Internationalization
# https://docs.djangoproject.com/en/5.2/topics/i18n/

LANGUAGE_CODE = "en-us"

TIME_ZONE = "UTC"

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.2/howto/static-files/

STATIC_URL = "static/"
STATICFILES_DIRS = [
    BASE_DIR / "static",
]

# Default primary key field type
# https://docs.djangoproject.com/en/5.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"

# Analytics settings
ANALYTICS_TRACK_ANONYMOUS_USERS = True
ANALYTICS_GEO_IP_ENABLED = False  # Set to True to enable geographic tracking
